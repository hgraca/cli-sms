<?xml version="1.0" encoding="UTF-8"?>

<!-- https://phpunit.readthedocs.io/en/latest/configuration.html -->
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/bin/.phpunit/phpunit.xsd"
         colors="true"
         bootstrap="vendor/autoload.php"
>
    <php>
        <ini name="error_reporting" value="-1" />
        <env name="APP_ENV" value="test" force="true" />
        <server name="SHELL_VERBOSITY" value="-1" />
        <server name="SYMFONY_PHPUNIT_REMOVE" value="" />
        <server name="SYMFONY_PHPUNIT_VERSION" value="8.5" />

        <!-- define your env variables for the test env here -->
        <env name="KERNEL_CLASS" value="Acme\App\Infrastructure\Framework\Symfony\Kernel" />

        <!-- ###+ doctrine/doctrine-bundle ### -->
        <env name="DATABASE_URL" value="sqlite:///%kernel.project_dir%/var/data.db"/>
        <!-- ###- doctrine/doctrine-bundle ### -->

        <!-- Options are disabled|weak|<int max amount>|<stop at | these messages | for debugging> -->
        <env name="SYMFONY_DEPRECATIONS_HELPER" value="weak" />
    </php>

    <testsuites>
        <testsuite name="Project Test Suite">
            <directory suffix="Test.php">tests</directory>
            <directory suffix="Test.php">lib/*/tests/</directory>
        </testsuite>
    </testsuites>

    <filter>
        <!-- Perform code coverage PHP for files in these folders, including the files not run. -->
        <whitelist processUncoveredFilesFromWhitelist="true">
            <directory suffix=".php">src</directory>
            <directory suffix=".php">lib/*/src</directory>
        </whitelist>
    </filter>

    <listeners>
        <listener class="Symfony\Bridge\PhpUnit\SymfonyTestsListener" />
    </listeners>

    <extensions>
        <!-- it begins a database transaction before every testcase and rolls it back after
             the test finished, so tests can manipulate the database without affecting other tests -->
        <extension class="DAMA\DoctrineTestBundle\PHPUnit\PHPUnitExtension" />
    </extensions>

    <!-- Run `composer require symfony/panther` before enabling this extension -->
    <!--
    <extensions>
        <extension class="Symfony\Component\Panther\ServerExtension" />
    </extensions>
    -->
</phpunit>
